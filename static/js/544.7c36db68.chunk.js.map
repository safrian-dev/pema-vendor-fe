{"version":3,"file":"static/js/544.7c36db68.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/focusManager.ts","../node_modules/@tanstack/query-core/src/notifyManager.ts","../node_modules/@tanstack/query-core/src/onlineManager.ts","../node_modules/@tanstack/query-core/src/retryer.ts","../node_modules/@tanstack/query-core/src/subscribable.ts","../node_modules/@tanstack/query-core/src/utils.ts","../node_modules/@tanstack/react-query/src/QueryClientProvider.tsx"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.focused !== focused\n    if (changed) {\n      this.focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(({ listener }) => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState,\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends unknown[]> = (...args: T) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends unknown[]>(\n    callback: BatchCallsCallback<T>,\n  ): BatchCallsCallback<T> => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void,\n) => (() => void) | undefined\n\nconst onlineEvents = ['online', 'offline'] as const\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        onlineEvents.forEach((event) => {\n          window.addEventListener(event, listener, false)\n        })\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach((event) => {\n            window.removeEventListener(event, listener)\n          })\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    const changed = this.online !== online\n\n    if (changed) {\n      this.online = online\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(({ listener }) => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport type { CancelOptions, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = unknown>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => boolean) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        const canContinue = isResolved || !shouldPause()\n        if (canContinue) {\n          continueResolve(value)\n        }\n        return canContinue\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? 3\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n            return\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn?.()\n      return didContinue ? promise : Promise.resolve()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: Set<{ listener: TListener }>\n\n  constructor() {\n    this.listeners = new Set()\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    const identity = { listener }\n    this.listeners.add(identity)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners.delete(identity)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.size > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  FetchStatus,\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined' || 'Deno' in window\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions,\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>,\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions,\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown,\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions,\n): [TFilters, TOptions | undefined] {\n  return (\n    isQueryKey(arg1) ? [{ ...arg2, queryKey: arg1 }, arg3] : [arg1 || {}, arg2]\n  ) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs<\n  TFilters extends MutationFilters,\n  TOptions = unknown,\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions,\n): [TFilters, TOptions | undefined] {\n  return (\n    isQueryKey(arg1)\n      ? [{ ...arg2, mutationKey: arg1 }, arg3]\n      : [arg1 || {}, arg2]\n  ) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (\n    typeof fetchStatus !== 'undefined' &&\n    fetchStatus !== query.state.fetchStatus\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(a, b)\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some((key) => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: unknown): value is QueryKey {\n  return Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void) {\n  sleep(0).then(callback)\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n  return\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual?.(prevData, data)) {\n    return prevData as TData\n  } else if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data)\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n","'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nexport const defaultContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(\n  context: React.Context<QueryClient | undefined> | undefined,\n  contextSharing: boolean,\n) {\n  if (context) {\n    return context\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = ({ context }: ContextOptions = {}) => {\n  const queryClient = React.useContext(\n    getQueryClientContext(context, React.useContext(QueryClientSharingContext)),\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\ntype QueryClientProviderPropsBase = {\n  client: QueryClient\n  children?: React.ReactNode\n}\ntype QueryClientProviderPropsWithContext = ContextOptions & {\n  contextSharing?: never\n} & QueryClientProviderPropsBase\ntype QueryClientProviderPropsWithContextSharing = {\n  context?: never\n  contextSharing?: boolean\n} & QueryClientProviderPropsBase\n\nexport type QueryClientProviderProps =\n  | QueryClientProviderPropsWithContext\n  | QueryClientProviderPropsWithContextSharing\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  if (process.env.NODE_ENV !== 'production' && contextSharing) {\n    client\n      .getLogger()\n      .error(\n        `The contextSharing option has been deprecated and will be removed in the next major version`,\n      )\n  }\n\n  const Context = getQueryClientContext(context, contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={!context && contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n"],"names":["focusManager","_Subscribable","_inherits","FocusManager","_super","_createSuper","_this","_classCallCheck","call","setup","onFocus","isServer","window","addEventListener","listener","removeEventListener","_createClass","key","value","this","cleanup","setEventListener","_this$cleanup","hasListeners","undefined","_this$cleanup2","_this2","focused","setFocused","listeners","forEach","_ref","document","includes","visibilityState","Subscribable","notifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","schedule","push","scheduleMicrotask","flush","originalQueue","length","batch","result","batchCalls","_len","arguments","args","Array","_key","apply","setNotifyFunction","fn","setBatchNotifyFunction","createNotifyManager","onlineEvents","onlineManager","OnlineManager","onOnline","event","online","setOnline","navigator","onLine","defaultRetryDelay","failureCount","Math","min","pow","canFetch","networkMode","isOnline","CancelledError","options","revert","silent","isCancelledError","createRetryer","config","continueFn","promiseResolve","promiseReject","isRetryCancelled","isResolved","promise","Promise","outerResolve","outerReject","shouldPause","isFocused","resolve","onSuccess","reject","onError","pause","continueResolve","canContinue","onPause","then","onContinue","run","promiseOrValue","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","sleep","cancel","cancelOptions","abort","continue","cancelRetry","continueRetry","Set","subscribe","bind","identity","add","onSubscribe","delete","onUnsubscribe","size","noop","functionalUpdate","updater","input","isValidTimeout","Infinity","timeUntilStale","updatedAt","staleTime","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","_objectSpread","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","_filters$type","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","mutationKey","hashQueryKey","status","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","a","b","partialDeepEqual","some","replaceEqualDeep","array","isPlainArray","aSize","bItems","bSize","copy","equalItems","i","shallowEqualObjects","isArray","o","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","toString","timeout","setTimeout","getAbortController","AbortController","replaceData","prevData","data","isDataEqual","structuralSharing","defaultContext","React","QueryClientSharingContext","getQueryClientContext","context","contextSharing","ReactQueryClientContext","useQueryClient","queryClient","Error","QueryClientProvider","_ref2","_ref2$contextSharing","client","mount","unmount","Context"],"sourceRoot":""}